program         : statement * end!=EOF_TYPE ;
statement       : ( printstat           
                | blockstat   
                | ifstat      
                | whilestat   
                | assignstat )
                ;

assignstat      : NAME '=' expr ';'                         ;
printstat       : 'print' '(' ( NAME | expr ) ')' ';'         ;
ifstat          : 'if' '(' test ')' statement               ;
whilestat       : 'while' '(' test ')' statement            ;
blockstat       : '{' statement * end!=RCURBRACK '}'        ;


expr            : ( NUMBER | string )                            ;
test            : ( NAME | expr ) cmp_op ( NAME | expr )            ;

string          : '"' ( NAME | NUMBER ) * end==NAME,NUMBER '"'     ;
NAME            : ( 'a'..'z' | 'A'..'Z' ) + ;                      
NUMBER          : ('0'..'9') +                                    ;
cmp_op          : ( DEQUALS | GE | LE | '>' | '<' ) ;
DEQUALS          : '=' '='       ;
GE              : '>' '='       ;
LE              : '<' '='       ;

PREDICATES: Map rule_name to the token_name that predicts said rule

printstat -> PRINT              
blockstat -> LCURBRACK
ifstat -> IF
whilestat -> WHILE
string -> DQUOTE
NAME -> NAME
NUMBER -> NUMBER
DEQUALS -> EQUALS
GE -> GT&EQUALS
LE -> LT&EQUALS
'<' -> LT
'>' -> GT
expr -> NUMBER|DQUOTE
assignstat -> NAME
END

# TERMINAL_DEFS: 
# I should put these IN the grammar, but for now, I'm putting them 
# here. I'll fix this at some point, but for now with the way my 
# parser generator works, this makes my life a little easier.

NUMBER          : ('0'..'9') ;
NAME            : ( 'a'..'z' | 'A'..'Z' ) + ;
cmp_op          : ( '==' | '>=' | '<=' | '>' | '<' )                ;

Sike, I'm putting these back in, or else my tree based impl 
recurses forever. :)