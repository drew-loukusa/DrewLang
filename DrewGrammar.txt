GRAMMAR 

program      : statement *                                                     ;
statement    : printstat           
             | blockstat   
             | ifstat      
             | whilestat   
             | assignstat
             | funcdef
             | funccall
             | exprstat
             ;

assignstat   : NAME '='  expr ';'                                               ;  
printstat    : 'print' '(' expr ')' ';'                                         ;
ifstat       : 'if' '(' test ')' statement                                      ;
whilestat    : 'while' '(' test ')' statement                                   ;
blockstat    : '{' statement *  '}'                                             ;
exprstat     : expr ';'                                                         ;

expr         : term ( add_op term ) *                                           ;
term         : atom ( mult_op atom ) *                                          ;
atom         : NAME | NUMBER | STRING | funccall                                ;
test         : expr cmp_op expr                                                 ;

funcdef      : 'def' NAME '(' exprlist ? ')' statement                          ;
funccall     : NAME '(' exprlist ? ')' ';'                                      ;
exprlist     : expr ( ',' expr ) *                                              ;

cmp_op       : '==' | '>=' | '<=' | '>' | '<'                                   ;
add_op       : '+' | '-'                                                        ;
mult_op      : '*' | '/'                                                        ;

END

# ---------------------------------------------------------------------------

AST

program         : ^ $PROGRAM statement *    ; 
statement       :  ^ ( printstat 
                |  blockstat 
                |  ifstat 
                |  whilestat 
                |  assignstat 
                |  funcdef 
                |  funccall 
                |  dowhile
                |  exprstat )
                ;

assignstat      : NAME '=' expr ';'                 -> ^( '=' NAME expr )               ; 
printstat       : 'print' '(' expr ')' ';'          -> ^( 'print' expr )                ;
ifstat          : 'if' '(' test ')' statement       -> ^( 'if' test statement )         ; 
whilestat       : 'while' '(' test ')' statement    -> ^( 'while' test statement )      ;
blockstat       : $BLOCKSTAT '{' statement *  '}'   -> ^( $BLOCKSTAT statement )        ; 
exprstat        : expr ';'                          -> ^( expr )                        ; 
dowhile         : 'do' blockstat 'while' '(' test ')' -> ^( 'do' test blockstat )       ;

expr            : term  ( ^ add_op term ) *                     ;
term            : atom  ( ^ mult_op atom ) *                    ; 
atom            : ^ ( NAME |  NUMBER |  STRING |  funccall )    ;
test            : expr ^ cmp_op expr                            ;

funcdef         : 'def' NAME '(' exprlist ? ')' statement -> ^( 'def' NAME exprlist statement )  ;
funccall        : NAME '(' exprlist ? ')' ';'             -> ^( NAME exprlist )       ;
exprlist        : $EXPRLIST expr ( ',' expr ) *           -> ^( $EXPRLIST expr expr )      ; 

cmp_op          : ^ ( '==' |  '>=' |  '<=' |  '>' |  '<' )      ;
add_op          : ^ ( '+' | '-' )                               ;
mult_op         : ^ ( '*' | '/' )                               ; 

END

# Map rule_name to the token_name that predicts said rule:
# I auto-generate most predicates, it would be nice to have that for ALL predicates.
# These are still hand-written beacuse my code can't yet calculate when rules will have 
# conflicting look-ahead sets, i.e. two rules are predicted by the same start token.
# I will improve my code at a later date to take care of this.

# Also, I have tokens in here? Do I need those anymore ? 


# -----------------------------------------------------------------

PREDICATES 

#namelist -> NAME
assignstat -> NAME&EQUALS
NAME -> NAME
NUMBER -> NUMBER
STRING -> STRING
GE -> GT&EQUALS
LE -> LT&EQUALS
funccall -> NAME&LPAREN
#parameters -> LPAREN
END

TOKENS: 
# Name of token:      Token Text:
#---------------------------------
COMMA                   ','
PERIOD                  '.'
LPAREN                  '('
RPAREN                  ')'
LCURBRACK               '{'
RCURBRACK               '}'  
LBRACK                  '['
RBRACK                  ']'
SEMICOLON               ';'
COLON                   ':'
EQUALS                  '='
DEQUALS                 '=='
GT                      '>'
GE                      '>='
LT                      '<' 
LE                      '<='  
QUOTE                   "'"
DQUOTE                  '"'
STAR                    '*'
PLUS                    '+'
DASH                    '-'
FSLASH                  '/'
BSLASH                  '\'
IF                      'if' 
DO                      'do' 
WHILE                   'while'
PRINT                   'print'
DEF                     'def'
NAME                    NON_PRE_DEF     ( ( 'a' .. 'z' ) | ( 'A' .. 'Z' ) ) *
NUMBER                  NON_PRE_DEF     ( '0' .. '9' ) * 
STRING                  NON_PRE_DEF     '"' . * '"'              
END 
                                        