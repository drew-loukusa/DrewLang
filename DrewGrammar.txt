program      : statement *                                                      ;
statement    : printstat           
             | blockstat   
             | ifstat      
             | whilestat   
             | assignstat
             | funcdef
             | funccall
             | expr
             ;

assignstat   : NAME '='  expr ';'                                               ;  
printstat    : 'print' '(' expr ')' ';'                                         ;
ifstat       : 'if' '(' test ')' statement                                      ;
whilestat    : 'while' '(' test ')' statement                                   ;
blockstat    : '{' statement *  '}'                                             ;

expr         : sub_expr ( math_op sub_expr ) *                                  ;
sub_expr     : NAME | NUMBER | STRING | funccall                                ;
test         : expr cmp_op expr                                                 ;

funcdef      : 'def' NAME parameters statement                                  ;
funccall     : NAME parameters ';'                                              ;
parameters   : '(' NAME * ( ',' NAME ) *  ')'                                   ;

STRING       : '"' . * '"'                                                      ;
NAME         : 'a'..'z' | 'A'..'Z'                                              ;                      
NUMBER       : '0'..'9'                                                         ;
cmp_op       : DEQUALS | GE | LE | '>' | '<'                                    ;
math_op      : add_op | mult_op                                                 ;
add_op       : '+' | '-'                                                        ;
mult_op      : '*' | '/'                                                        ;

DEQUALS      : '=='                                                             ;
GE           : '>='                                                             ;
LE           : '<='                                                             ;
#LT          : '<'                                                              ;
#GT          : '>'                                                              ;


# Map rule_name to the token_name that predicts said rule:
PREDICATES: 

assignstat -> NAME&EQUALS
NAME -> NAME
NUMBER -> NUMBER
GE -> GT&EQUALS
LE -> LT&EQUALS
funccall -> NAME&LPAREN

END

TOKENS: 
# Name of token:      Token Text:
#---------------------------------
COMMA                   ','
PERIOD                  '.'
LPAREN                  '('
RPAREN                  ')'
LCURBRACK               '{'
RCURBRACK               '}'  
LBRACK                  '['
RBRACK                  ']'
SEMICOLON               ';'
COLON                   ':'
EQUALS                  '='
DEQUALS                 '=='
GT                      '>'
GE                      '>='
LT                      '<' 
LE                      '<='  
QUOTE                   "'"
DQUOTE                  '"'
STAR                    '*'
PLUS                    '+'
DASH                    '-'
FSLASH                  '/'
BSLASH                  '\'
IF                      'if' 
WHILE                   'while'
PRINT                   'print'
DEF                     'def'
NAME                    NON_PRE_DEF
NUMBER                  NON_PRE_DEF
STRING                  NON_PRE_DEF
END 