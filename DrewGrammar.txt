program         : statement * end!=EOF_TYPE ;
statement       : printstat           
                | blockstat   
                | ifstat      
                | whilestat   
                | assignstat
                | funcdef
                | funccall
                ;

assignstat      : NAME '=' ( expr | funccall ) ';'                          ;
printstat       : 'print' '(' ( NAME | expr ) ')' ';'                       ;
ifstat          : 'if' '(' test ')' statement                               ;
whilestat       : 'while' '(' test ')' statement                            ;
blockstat       : '{' statement * end!=RCURBRACK '}'                        ;

#expr            : ( NUMBER | STRING )  add_expr * end==PLUS,DASH           ; 
expr            : ( NAME | NUMBER | STRING )  ( add_op expr ) * end==PLUS,DASH     ;
test            : expr cmp_op expr                                          ;

funcdef         : 'def' NAME parameters statement                           ;
funccall        : NAME parameters ';'                                       ;
parameters      : '(' NAME * end==NAME ( ',' NAME ) * end==COMMA ')'        ;

#add_expr        : add_op expr                                              ;
#string          : '"' ( NAME | NUMBER ) * end==NAME,NUMBER '"'             ;
STRING          : '"' . * end!=" '"'                                        ;
NAME            : ( 'a'..'z' | 'A'..'Z' )                                   ;                      
NUMBER          : ('0'..'9')                                                ;
cmp_op          : DEQUALS | GE | LE | '>' | '<'                             ;
add_op          :  '+' | '-'                                                ;
mult_op         : '*'  | '/'                                                ;

DEQUALS         : '=' '='                                                   ;
GE              : '>' '='                                                   ;
LE              : '<' '='                                                   ;
LT              : '<'                                                       ;
GT              : '>'                                                       ;


# Map rule_name to the token_name that predicts said rule:
PREDICATES: 

#printstat -> PRINT              
#blockstat -> LCURBRACK
#ifstat -> IF
#whilestat -> WHILE
#funcdef -> DEF
#STRING -> STRING
NAME -> NAME
NUMBER -> NUMBER
#DEQUALS -> EQUALS
GE -> GT&EQUALS
LE -> LT&EQUALS
#'<' -> LT
#'>' -> GT
#'+' -> PLUS
#'-' -> DASH
#'*' -> STAR
#'/' -> FSLASH
#expr -> NUMBER|STRING
#assignstat -> NAME
funccall -> NAME&LPAREN
END

TOKENS: 
#Token Name     Token Text
NAME            multi
NUMBER          multi 
STRING          multi
COMMA           ,
PERIOD          .
LPAREN          ( 
RPAREN          ) 
LCURBRACK       {
RCURBRACK       }   
LBRACK          [
RBRACK          ]
SEMICOLON       ;
COLON           :
EQUALS          =
GT              >
LT              <   
QUOTE           '
DQUOTE          "
STAR            *
PLUS            +
DASH            -
FSLASH          /
BSLASH          \
IF              if 
WHILE           while
PRINT           print
DEF             def
END