grammar             : rule *                                            ;

rule                : RULE_NAME ':' or_tokens * ast_rewrite ? ';'       ;

# Note: According to this grammar, you could have an ast rewrite in a rule, but also use the ast operator 
# to signify what token should be set as root. This is NOT supported by 'parser_generator' and is not 
# handled in the grammar for simplicities sake. It might work, but doing so may result in unexpected behavior. 

ast_rewrite     : '->' '^(' atom * ')'

or_tokens       : and_tokens ( '|' and_tokens ) *          ; 
and_tokens      : cmpd_token ( '&' cmpd_token ) *          ;
cmpd_token      : '~' ? ast_atom ( '*' | '+' | '?' ) ?     ;
ast_atom        : '^' ? atom                               ; 
atom            :  sub_rule | QUOTED_TERMINAL | TERMINAL
                | ARTIFICAL_NODE | rule_invoke | range     ; 

sub_rule        : '(' or_tokens * ')'                      ; 
rule_invoke     : RULE_NAME                                ; 
RANGE           : . '..' .                                 ;

LOOKAHEAD_SETS:

NUMBER          ->  NUMBER
TERMINAL        ->  TERMINAL
COMMENT         ->  COMMENT
QUOTED_TERMINAL ->  QUOTED_TERMINAL

END

TOKENS:     
# NAME             # Definition     # Start Set 
AST_ROOT                '^'
OR                      '|'
AND                     '&'
QMARK                   '?'
COMMA                   ','
PERIOD                  '.'
LPAREN                  '(' 
RPAREN                  ')'
LCURBRACK               '{'
RCURBRACK               '}'   
LBRACK                  '['
RBRACK                  ']'
SEMICOLON               ';'
COLON                   ':'
EQUALS                  '='
DEQUALS                 '==' 
ARROW                   '->' 
AST_REWRITE             '^(' 
#QUOTE                   "'"
#DQUOTE                  '"'
STAR                    '*'
PLUS                    '+'
DASH                    '-'
FSLASH                  '/'
BSLASH                  '\'
TILDE                   '~'
WILDCARD                '.'
RANGE_OP                '..'
RULE_NAME               re([a-z]+)      a..z
NUMBER                  re([0-9]+)      0..9
TERMINAL                re([A-Z]+)      A..Z
ARTIFICAL_NODE          re(^\$[A-Z]+)   $
QUOTED_TERMINAL         re('[^']+')     ' 
END