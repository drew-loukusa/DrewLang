GRAMMAR:
# This is out of date at the moment. See AST for the up-to-date gramamr.
program      : statement *                                                     ;
statement    : printstat           
             | blockstat   
             | ifstat      
             | whilestat   
             | assignstat
             | funcdef
             | funccall
             | exprstat
             ;

assignstat   : NAME '='  expr ';'                                               ;  
printstat    : 'print' '(' expr ')' ';'                                         ;
ifstat       : 'if' '(' test ')' statement                                      ;
whilestat    : 'while' '(' test ')' statement                                   ;
blockstat    : '{' statement *  '}'                                             ;
exprstat     : expr ';'                                                         ;

expr         : term ( add_op term ) *                                           ;
term         : atom ( mult_op atom ) *                                          ;
atom         : NAME | NUMBER | STRING | funccall                                ;
test         : expr cmp_op expr                                                 ;

funcdef      : 'def' NAME '(' namelist ? ')' blockstat                          ;
funccall     : NAME '(' exprlist ? ')' ';'                                      ;
exprlist     : expr ( ',' expr ) *                                              ;
namelist     : NAME ( ',' NAME ) *                                              ;

cmp_op       : '==' | '>=' | '<=' | '>' | '<'                                   ;
add_op       : '+' | '-'                                                        ;
mult_op      : '*' | '/'                                                        ;

END

# ---------------------------------------------------------------------------

AST:

# Terminals that start with a '$' character are artificial AST nodes;
# Those rules either don't have an item that makes sense to make into the root node, 
# or by having an artifical AST node as root, it makes later stages easier to code.

program         : ^ $PROGRAM statement *    ; 
statement       :  ^ ( printstat 
                |  blockstat 
                |  ifstat 
                |  whilestat 
                |  assignstat 
                |  funcdef 
                |  funccall 
                |  dowhile
                |  classdef 
                |  exprstat )
                ;

suite_stat      : ^ ( funccall | assignstat | blockstat )                                   ;

assignstat      : NAME '=' expr ';'                     -> ^( '=' NAME expr )               ; 
blockstat       : $BLOCKSTAT '{' statement *  '}'       -> ^( $BLOCKSTAT statement )        ; 
printstat       : 'print' '(' expr ')' ';'              -> ^( 'print' expr )                ;

ifstat          : ^ 'if' test suite_stat elif_else_stat ?                                   ; 
elif_else_stat  : ^ $ELIF_ELSE_STAT elifstat * elsestat ?                                   ;
elifstat        : ^ 'elif' test suite_stat                                                  ;
elsestat        : ^ 'else' suite_stat                                                       ;

whilestat       : 'while' test suite_stat       -> ^( 'while' test suite_stat )             ;
dowhile         : 'do' blockstat 'while' test   -> ^( 'do' test blockstat )                 ;
exprstat        : expr ';'                      -> ^( expr )                                ; 
classdef        : ^ 'class' NAME blockstat                                                  ;

expr            : ^ ( grouping | add_expr | negate_expr )                                   ;
grouping        : '(' expr ')'                  -> ^( expr )                                ;
negate_expr     : ^ ( '-' | '!' ) expr                                                      ;

add_expr        : term  ( ^ add_op term ) *                                                 ;
term            : atom  ( ^ mult_op atom ) *                                                ; 
atom            : ^ ( NAME |  NUMBER |  STRING |  funccall | dotexpr | 'True' | 'False' )   ;
test            : '(' boolexpr ')'      -> ^( boolexpr )                                    ;

boolexpr        : and_expr ( ^ 'or' and_expr ) * ;
and_expr        : comp_expr ( ^ 'and' comp_expr ) * ; 
comp_expr       : expr ( ^ cmp_op expr ) ? ; 

dotexpr         : NAME ^ '.' ( NAME | funccall )                                            ;

funcdef         : $FUNCDEF 'def' NAME '(' namelist ? ')' blockstat  -> ^( $FUNCDEF NAME namelist blockstat )  ;
funccall        : NAME '(' exprlist ? ')' ';'                       -> ^( NAME exprlist )             ;
exprlist        : $EXPRLIST expr ( ',' expr ) *                     -> ^( $EXPRLIST expr expr )       ; 
namelist        : $NAMELIST NAME ( ',' NAME ) *                     -> ^( $NAMELIST NAME NAME )       ;

cmp_op          : ^ ( '==' |  '>=' |  '<=' |  '>' |  '<' )      ;
add_op          : ^ ( '+' | '-' )                               ;
mult_op         : ^ ( '*' | '/' )                               ; 

END

# Map rule_name to the token_name that predicts said rule:
# I auto-generate most look ahead sets, it would be nice to have that for ALL 
# look ahead sets.These are still hand-written beacuse my code can't yet calculate 
# when rules will have conflicting look-ahead sets, i.e. two rules are predicted by 
# the same start token. I will improve my code at a later date to take care of this.

# -----------------------------------------------------------------

LOOKAHEAD_SETS:

#namelist -> NAME
assignstat -> NAME&EQUALS
#elsestat   -> ELIF|ELSE
NAME -> NAME
NUMBER -> NUMBER
STRING -> STRING
GE -> GT&EQUALS
LE -> LT&EQUALS
funccall -> NAME&LPAREN
#parameters -> LPAREN
END

TOKENS: 
# Name of token:      Token Text:           # 
#---------------------------------
BANG                    '!'
COMMA                   ','
PERIOD                  '.'
LPAREN                  '('
RPAREN                  ')'
LCURBRACK               '{'
RCURBRACK               '}'  
LBRACK                  '['
RBRACK                  ']'
SEMICOLON               ';'
COLON                   ':'
EQUALS                  '='
DEQUALS                 '=='
GT                      '>'
GE                      '>='
LT                      '<' 
LE                      '<='  
QUOTE                   "'"
DQUOTE                  '"'
STAR                    '*'
PLUS                    '+'
DASH                    '-'
FSLASH                  '/'
BSLASH                  '\'
IF                      'if' 
ELIF                    'elif' 
ELSE                    'else'
DO                      'do' 
AND                     'and'
OR                      'or' 
WHILE                   'while'
PRINT                   'print'
DEF                     'def'
CLASS                   'class'
TRUE                    'True' 
FALSE                   'False' 
NAME                    NON_PRE_DEF     ( ( 'a' .. 'z' ) | ( 'A' .. 'Z' ) ) *
NUMBER                  NON_PRE_DEF     ( '0' .. '9' ) * 
STRING                  NON_PRE_DEF     '"' . * '"'              
END 
                                        